import java.util.ArrayList;

import processing.core.PApplet;

/**
 * my_sequencer
 * 
 * This class (will be) capable of generating a sequence of my_notes which
 * include the neccesary time, duration, and frequency values for the
 * Insturment.play() function
 * 
 * The sequence is generated according to a series of sub sequences which each
 * have their own key or chord parameters (and hopefully other parameters like
 * waveform, duration, etc).
 * 
 * ex: a sequence of 4 (Amaj) 3 (Amaj) 2(Amaj_pentatonic) would generate the
 * following: (A B C# D) (A B C) (A B C#)
 **/
public class my_sequencer {
	PApplet parent; // The parent PApplet that we will render ourselves onto

	// This array will be generated by the string k param in the constructor
	int[] key_intervals;
	// this array should contain the complete series of all the note information
	// to be sent to my_instrument
	ArrayList<my_note> notes;
	int octave;
	int tempo;

	// this array will contain all the sub_seq objects that are used to generate
	// all the note information
	int num_sub_seqs;
	ArrayList<sub_seq> sub_list;
	float cur_time;
	int[] num_steps = { 3, 4, 5 };
	int[] mode = { 1, 1, 1 };

	my_sequencer(String k, int octave, int tempo, int num_sub_seqs, PApplet p) {
		parent = p;

		key_intervals = gen_music_key_seq(k);

		notes = new ArrayList<my_note>();

		this.tempo = tempo;
		this.octave = octave;

		this.num_sub_seqs = num_sub_seqs;
		sub_list = new ArrayList<sub_seq>();

		fill();
	}

	void fill() {
		for (int i = 0; i < num_sub_seqs; i++) {
			sub_seq a = new sub_seq(parent, num_steps[i], key_intervals, tempo, octave, cur_time, mode[i]);
			sub_list.add(a);
			my_note[] sub_seq_notes = a.get_notes();
			for (int j = 0; j < sub_seq_notes.length; j++) {
				notes.add(sub_seq_notes[j]);
			}
			cur_time += (float) 5 * (((float) tempo / 60.0) * (0.5));
		}
	}

	// This function accepts a string value k which is a formatted key sign
	int[] gen_music_key_seq(String k) {
		switch (k) {
		case "maj":
			int[] majorScale = { 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1 };
			return majorScale;
		case "natMin":
			int[] natMinorScale = { 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2 };
			return natMinorScale;
		case "harMin":
			int[] harMinorScale = { 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2 };
			return harMinorScale;
		case "majPent":
			int[] majPentScale = { 2, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 2, 3, 2, 3 };
			return majPentScale;
		case "minPent":
			int[] minPentScale = { 3, 2, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 2, 3, 2 };
			return minPentScale;
		}
		return new int[1];

	}

	public ArrayList<my_note> getNotes() {
		return notes;
	}

	public void set_notes(ArrayList<my_note> notes) {
		this.notes = notes;
	}

	public ArrayList<sub_seq> get_sub_list() {
		return sub_list;
	}

	public void set_sub_list(ArrayList<sub_seq> sub_list) {
		this.sub_list = sub_list;
	}

	public int get_num_sub_seqs() {
		return num_sub_seqs;
	}

	public void set_num_sub_seqs(int num_sub_seqs) {
		this.num_sub_seqs = num_sub_seqs;
	}

	public int get_tempo() {
		return tempo;
	}

	public void set_tempo(int tempo) {
		this.tempo = tempo;
	}

	public int get_octave() {
		return octave;
	}

	public void set_octave(int octave) {
		this.octave = octave;
	}

	public int[] getKey_intervals() {
		return key_intervals;
	}

	public void setKey_intervals(int[] key_intervals) {
		this.key_intervals = key_intervals;
	}

	public my_note[] get_notes() {
		my_note[] note_array = new my_note[notes.size()];
		for (int i = 0; i < notes.size(); i++) {
			note_array[i] = notes.get(i);
		}
		return note_array;
	}
}